server {

    listen 80;
    server_name _;

    root /var/www/html/public;
    index index.php index.html;

    # API (Laravel через php-fpm)
    location ^~ /api/ {
        # Preflight обрабатываем на уровне nginx
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Allow-Methods "GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, X-Requested-With, X-XSRF-TOKEN, Accept, Origin, Authorization" always;
            return 204;
        }
        try_files $uri /index.php?$query_string;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root/index.php;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param REQUEST_URI $request_uri;
        fastcgi_param QUERY_STRING $query_string;
        fastcgi_pass php-fpm:9000;
        fastcgi_index index.php;
    }

    # На случай обращения к /api без завершающего слэша
    location ^~ /api {
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Allow-Methods "GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, X-Requested-With, X-XSRF-TOKEN, Accept, Origin, Authorization" always;
            return 204;
        }
        try_files $uri /index.php?$query_string;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root/index.php;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param REQUEST_URI $request_uri;
        fastcgi_param QUERY_STRING $query_string;
        fastcgi_pass php-fpm:9000;
        fastcgi_index index.php;
    }

    # Broadcasting auth
    location ^~ /broadcasting/ {
        # Добавляем CORS заголовки для всех запросов
        # Если Origin не отправляется, используем конкретные разрешенные origins
        set $cors_origin $http_origin;
        if ($http_origin = "") {
            set $cors_origin "http://localhost:5173";
        }
        
        add_header Access-Control-Allow-Origin $cors_origin always;
        add_header Access-Control-Allow-Credentials "true" always;
        add_header Access-Control-Allow-Methods "GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, X-Requested-With, X-XSRF-TOKEN, Accept, Origin, Authorization" always;
        
        if ($request_method = OPTIONS) {
            return 204;
        }
        try_files $uri /index.php?$query_string;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root/index.php;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param REQUEST_URI $request_uri;
        fastcgi_param QUERY_STRING $query_string;
        fastcgi_pass php-fpm:9000;
        fastcgi_index index.php;
    }

    # Sanctum (csrf-cookie)
    location ^~ /sanctum/ {
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Allow-Methods "GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, X-Requested-With, X-XSRF-TOKEN, Accept, Origin, Authorization" always;
            return 204;
        }
        try_files $uri /index.php?$query_string;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root/index.php;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param REQUEST_URI $request_uri;
        fastcgi_param QUERY_STRING $query_string;
        fastcgi_pass php-fpm:9000;
        fastcgi_index index.php;
    }

    # На случай обращения к /sanctum без завершающего слэша
    location ^~ /sanctum {
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Allow-Methods "GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, X-Requested-With, X-XSRF-TOKEN, Accept, Origin, Authorization" always;
            return 204;
        }
        try_files $uri /index.php?$query_string;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root/index.php;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param REQUEST_URI $request_uri;
        fastcgi_param QUERY_STRING $query_string;
        fastcgi_pass php-fpm:9000;
        fastcgi_index index.php;
    }

    # Общий обработчик PHP, чтобы /index.php всегда выполнялся через php-fpm
    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param QUERY_STRING $query_string;
        fastcgi_pass php-fpm:9000;
        fastcgi_index index.php;
    }

    # Public app (root) — удалено, чтобы порт 5175 обслуживал только API

    # Admin app
    location /admin/ {
        rewrite ^/admin/(.*)$ /$1 break;
        proxy_pass http://app-admin:5173/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}


